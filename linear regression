def linear_regression_cost_function(X, y, theta):
    """
    Compute the cost function for linear regression.

    Parameters:
    X : list of lists
        Input feature matrix of shape (m, n), where m is the number of samples and n is the number of features.
    y : list
        Target values of shape (m, 1).
    theta : list
        Parameters of the linear regression model of shape (n, 1).

    Returns:
    float
        The computed cost (MSE).
    """
    m = len(y)  # Number of training examples
    total_cost = 0

    # Loop through each training example
    for i in range(m):
        # Compute the hypothesis (prediction) for the i-th example
        prediction = 0
        for j in range(len(theta)):
            prediction += theta[j] * X[i][j]
        
        # Calculate the squared error for the i-th example
        squared_error = (prediction - y[i]) ** 2
        
        # Add to the total cost
        total_cost += squared_error

    # Compute the average cost (Mean Squared Error)
    cost = (1 / (2 * m)) * total_cost
    return cost


# Example usage:
if __name__ == "__main__":
    # Example data
    X = [[1, 2], [1, 3], [1, 4], [1, 5]]  # Feature matrix with a column of ones for the intercept term
    y = [7, 6, 5, 4]  # Target values
    theta = [0.1, 0.2]  # Initial parameters

    # Compute the cost
    cost = linear_regression_cost_function(X, y, theta)
    print(f"Cost: {cost}")